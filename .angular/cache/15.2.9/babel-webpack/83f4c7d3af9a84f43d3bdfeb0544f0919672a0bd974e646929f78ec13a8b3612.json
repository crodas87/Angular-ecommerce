{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/token.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(tokenService, router) {\n    this.tokenService = tokenService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const token = this.tokenService.getToken();\n    if (!token) {\n      this.router.navigate(['/home']);\n      return false;\n    }\n    return true;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,YAA0B,EAC1BC,MAAc;IADd,iBAAY,GAAZD,YAAY;IACZ,WAAM,GAANC,MAAM;EACb;EAEHC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,MAAMC,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC1C,IAAI,CAACD,KAAK,EAAE;MACV,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;;;mBAhBWT,SAAS;AAAA;;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","tokenService","router","canActivate","route","state","token","getToken","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Cristian\\Documents\\Angular-router-17-step\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { TokenService } from './../services/token.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private tokenService: TokenService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const token = this.tokenService.getToken();\n    if (!token) {\n      this.router.navigate(['/home']);\n      return false;\n    }\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}